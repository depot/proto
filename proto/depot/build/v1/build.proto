syntax = "proto3";
package depot.build.v1;

service BuildService {
  rpc CreateBuild(CreateBuildRequest) returns (CreateBuildResponse);
  rpc FinishBuild(FinishBuildRequest) returns (FinishBuildResponse);

  // Called for each platform that the build is targeting

  rpc GetEndpoint(GetEndpointRequest) returns (stream GetEndpointResponse);
  rpc ReportHealth(stream ReportHealthRequest) returns (ReportHealthResponse);
  rpc ReleaseEndpoint(ReleaseEndpointRequest) returns (ReleaseEndpointResponse);
}

message CreateBuildRequest {
  string namespace_id = 1;
}

message CreateBuildResponse {
  string build_id = 1;
}

message FinishBuildRequest {
  string build_id = 1;
  oneof result {
    BuildSuccess success = 2;
    BuildError error = 3;
  }

  message BuildSuccess {}

  message BuildError {
    string error = 1;
  }
}

message FinishBuildResponse {}

enum Platform {
  PLATFORM_UNSPECIFIED = 0;
  PLATFORM_AMD64 = 1;
  PLATFORM_ARM64 = 2;
}

message GetEndpointRequest {
  string build_id = 1;
  Platform platform = 2;
}

message GetEndpointResponse {
  oneof connection {
    PendingConnection pending = 1;
    ActiveConnection active = 2;
  }

  message PendingConnection {}

  message ActiveConnection {
    string endpoint = 1;
    string server_name = 2;
    CertificatePair cert = 3;
    PublicCertificate ca_cert = 4;
  }
}

message ReleaseEndpointRequest {
  string build_id = 1;
  Platform platform = 2;
}

message ReleaseEndpointResponse {}

message PublicCertificate {
  string cert = 1;
}

message PrivateKey {
  string key = 1;
}

message CertificatePair {
  PublicCertificate cert = 1;
  PrivateKey key = 2;
}

message ReportHealthRequest {
  string build_id = 1;
  Platform platform = 2;
}

message ReportHealthResponse {}
