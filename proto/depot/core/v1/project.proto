syntax = "proto3";
package depot.core.v1;

import "google/protobuf/timestamp.proto";

service ProjectService {
  // List all projects
  rpc ListProjects(ListProjectsRequest) returns (ListProjectsResponse) {}

  // Get a project
  rpc GetProject(GetProjectRequest) returns (GetProjectResponse) {}

  // Create a new project
  rpc CreateProject(CreateProjectRequest) returns (CreateProjectResponse) {}

  // Update a project
  rpc UpdateProject(UpdateProjectRequest) returns (UpdateProjectResponse) {}

  // Delete a project
  rpc DeleteProject(DeleteProjectRequest) returns (DeleteProjectResponse) {}

  // List project's trust policies.
  rpc ListTrustPolicies(ListTrustPoliciesRequest) returns (ListTrustPoliciesResponse) {}

  // Add a trust policy to a project.
  rpc AddTrustPolicy(AddTrustPolicyRequest) returns (AddTrustPolicyResponse) {}

  // Remove a trust policy from a project.
  rpc RemoveTrustPolicy(RemoveTrustPolicyRequest) returns (RemoveTrustPolicyResponse) {}
}

message Project {
  string project_id = 1;
  string organization_id = 2;
  string name = 3;
  string region_id = 4;
  google.protobuf.Timestamp created_at = 5;
  CachePolicy cache_policy = 6;
}

message ListProjectsRequest {}

message ListProjectsResponse {
  repeated Project projects = 1;
}

message GetProjectRequest {
  string project_id = 1;
}

message GetProjectResponse {
  Project project = 1;
}

message CreateProjectRequest {
  string name = 1;
  string organization_id = 2;
  string region_id = 3;
  optional CachePolicy cache_policy = 4;
}

message CreateProjectResponse {
  Project project = 1;
}

message UpdateProjectRequest {
  string project_id = 1;
  optional string name = 2;
  optional string region_id = 3;
  optional CachePolicy cache_policy = 4;
}

message UpdateProjectResponse {
  Project project = 1;
}

message DeleteProjectRequest {
  string project_id = 1;
}

message DeleteProjectResponse {}

message CachePolicy {
  int32 keep_bytes = 1;
  int32 keep_days = 2;
}

message ListTrustPoliciesRequest {
  string project_id = 1;
}

message ListTrustPoliciesResponse {
  repeated TrustPolicy trust_policies = 1;
}

message AddTrustPolicyRequest {
  string project_id = 1;
  oneof provider {
    BuildkiteOIDC buildkite = 2;
    CircleCIOIDC circleci = 3;
    GitHubOIDC github = 4;
  }
}

message AddTrustPolicyResponse {
  TrustPolicy trust_policy = 1;
}

message RemoveTrustPolicyRequest {
  string project_id = 1;
  string trust_policy_id = 2;
}

message RemoveTrustPolicyResponse {}

message TrustPolicy {
  string trust_policy_id = 1;
  oneof provider {
    BuildkiteOIDC buildkite = 2;
    CircleCIOIDC circleci = 3;
    GitHubOIDC github = 4;
  }
}

message GitHubOIDC {
  // The GitHubOIDC organization or user name
  string repository_owner = 1;
  string repository = 2;
}

message CircleCIOIDC {
  // CircleCI organization UUID must be a valid UUID, not the friendly organization ID.
  string organization_uuid = 1;
  // CircleCI project UUID must be a valid UUID, not the friendly project ID
  string project_uuid = 2;
}

message BuildkiteOIDC {
  string organization_slug = 1;
  string pipeline_slug = 2;
}
